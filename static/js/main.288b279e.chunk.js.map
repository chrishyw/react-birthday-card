{"version":3,"sources":["App.js","serviceWorker.js","index.js","S__42827780.jpg","omg.jpg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","btn1Clicked","state","value","toUpperCase","setState","answer","anime","targets","points","easing","duration","loop","opacity","translateY","incorrect","setInterval","handleChange","e","target","div_style","backgroundImage","concat","picture","backgroundRepeat","backgroundSize","hidden","display","input_classes","react_default","a","createElement","className","style","id","src","omg","title","onChange","name","join","placeholder","onClick","viewBox","position","bottom","right","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mUA2FeA,cAjFb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QASFI,YAAc,WAC0B,OAAnCP,EAAKQ,MAAMC,MAAMC,eAClBV,EAAKW,SAAS,CACZC,QAAQ,IAEVC,IAAM,CACJC,QAAS,aACTC,OAAQ,CACJ,CAAEN,MAAO,uCACT,CAAEA,MAAO,qCAEbO,OAAQ,cACRC,SAAU,KACVC,MAAM,IAGRL,IAAM,CACFC,QAAS,QACTK,QAAS,EACTF,SAAU,IACVG,WAAY,QAIhBpB,EAAKW,SAAS,CACZU,WAAW,IAEbC,YAAY,WACVtB,EAAKW,SAAS,CACZU,WAAW,KAEZ,OAzCMrB,EA8CbuB,aAAe,SAACC,GACdxB,EAAKW,SAAS,CAACF,MAAOe,EAAEC,OAAOhB,SA7C/BT,EAAKQ,MAAQ,CACXI,QAAQ,EACRH,MAAO,GACPY,WAAW,GALFrB,wEAoDX,IAAI0B,EAAYvB,KAAKK,MAAMI,OAAS,CAACe,gBAAe,OAAAC,OAASC,IAAT,KAAqBC,iBAAkB,YAAaC,eAAgB,SAAW,CAACJ,gBAAiB,QACjJK,EAAS7B,KAAKK,MAAMI,OAAS,CAACqB,QAAS,QAAU,CAACA,QAAS,SAC3DC,EAAgB/B,KAAKK,MAAMa,UAAY,CAAC,eAAgB,WAAa,CAAC,gBAE1E,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAOb,GAC1BS,EAAAC,EAAAC,cAAA,OAAKG,GAAG,MAAMC,IAAKC,IAAKH,MAAOP,EAAQW,MAAM,OAC7CR,EAAAC,EAAAC,cAAA,MAAIE,MAAOP,EAAQQ,GAAG,YAAtB,mFACAL,EAAAC,EAAAC,cAAA,SAAOE,MAAOP,EAAQQ,GAAG,SAAzB,8IACAL,EAAAC,EAAAC,cAAA,SAAOO,SAAUzC,KAAKoB,aAAciB,GAAG,cAAcK,KAAK,SAASN,MAAOP,EAAQM,UAAWJ,EAAcY,KAAK,KAAMC,YAAY,uBAClIZ,EAAAC,EAAAC,cAAA,UAAQG,GAAG,MAAMD,MAAOP,EAAQgB,QAAS7C,KAAKI,aAA9C,sBAEA4B,EAAAC,EAAAC,cAAA,OAAKY,QAAQ,eACTd,EAAAC,EAAAC,cAAA,WAASC,UAAU,YAAYvB,OAAO,oCAG1CoB,EAAAC,EAAAC,cAAA,OAAKG,GAAG,QACJL,EAAAC,EAAAC,cAAA,OAAKG,GAAG,YACNL,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,uGAEAF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACW,SAAU,WAAYC,OAAQ,QAASC,MAAO,QAAzD,gCA3EIC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.288b279e.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min';\nimport React, { Component } from 'react';\nimport \"./App.css\";\nimport anime from \"animejs\";\nimport picture from \"./S__42827780.jpg\"\nimport omg from \"./omg.jpg\"\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      answer: false,\n      value: \"\",\n      incorrect: false\n    }\n  }\n\n\n  btn1Clicked = () => {\n    if(this.state.value.toUpperCase() === \"BL\"){\n      this.setState({\n        answer: true\n      });\n      anime({\n        targets: '.polymorph',\n        points: [\n            { value: '215, 110 0, 110 0, 0 47.7, 0 67, 76' },\n            { value: '215, 110 0, 110 0, 0 0, 0 67, 76' }\n        ],\n        easing: 'easeOutQuad',\n        duration: 1200,\n        loop: false\n      });\n\n      anime({\n          targets: '#blip',\n          opacity: 1,\n          duration: 500,\n          translateY: 150\n      })\n    }\n    else{\n      this.setState({\n        incorrect: true\n      });\n      setInterval(()=>{\n        this.setState({\n          incorrect: false\n        });\n      }, 1000);\n    }\n    \n  }\n\n  handleChange = (e) => {\n    this.setState({value: e.target.value});\n  }\n\n  render() {\n\n    let div_style = this.state.answer ? {backgroundImage: `url(${picture})`, backgroundRepeat: \"no-repeat\", backgroundSize: \"cover\"} : {backgroundImage: \"none\"};\n    let hidden = this.state.answer ? {display: \"none\"} : {display: \"block\"};\n    let input_classes = this.state.incorrect ? [\"form-control\", \"invalid\"] : [\"form-control\"];\n\n    return (\n      <div className=\"App\" style={div_style}>\n        <img id=\"omg\" src={omg} style={hidden} title=\"BL\" />\n        <h2 style={hidden} id=\"question\">請問這位喜歡看的東西是什麼?</h2>\n        <small style={hidden} id=\"small\">我只是想確認我沒有寄錯信 :P (答案可從游標指到圖找)</small>\n        <input onChange={this.handleChange} id=\"input_field\" name=\"answer\" style={hidden} className={input_classes.join(\" \")} placeholder=\"請填寫\" />\n        <button id=\"cta\" style={hidden} onClick={this.btn1Clicked}>打開信</button>\n\n        <svg viewBox=\"0 0 215 110\">\n            <polygon className=\"polymorph\" points=\"215,110 0,110 0,0 49.3,0 215,0\" />\n        </svg>\n\n        <div id=\"blip\">\n            <div id=\"card_msg\">\n              <h1>臭老爸:</h1>\n              <p>Isn't it cool? Here's a little more text to know that what AnimeJS can do to your webpage.</p>\n\n              <p style={{position: \"absolute\", bottom: \"-10px\", right: \"2px\"}}>臭兒子</p>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/S__42827780.d891f7f1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/omg.4542335d.jpg\";"],"sourceRoot":""}